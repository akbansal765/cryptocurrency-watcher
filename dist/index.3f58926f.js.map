{"mappings":"ICGI,EAEA,EALJ,MAAM,EAAiB,SAAS,cAAc,CAAC,mBAC/C,IAAI,EAAgB,UAChB,EAAkB,KAKtB,MAAM,EAAY,CACd,QAAS,EAAE,CACX,QAAS,EAAE,CACX,QAAS,EAAE,AACf,EAyDA,SAAS,EAA0B,CAAM,CAAE,CAAQ,EAI/C,AAFA,CAAA,EAAS,IAAI,UADC,CAAC,iCAAiC,EAAE,EAAO,OAAO,EAAE,EAAS,CAAC,CAC5E,EAEO,SAAS,CAAG,SAAU,CAAK,EAC9B,IAAM,EAAU,KAAK,KAAK,CAAC,EAAM,IAAI,EACrC,GAAI,EAAQ,CAAC,CAAE,CACX,IAAM,EAAc,EAAQ,CAAC,AACzB,CAAA,EAAY,CAAC,EACb,AAxBhB,SAAwB,CAAM,CAAE,CAAW,EACvC,CAAS,CAAC,EAAO,CAAC,IAAI,CAAC,EAE3B,EAqB+B,EAAQ,GAE3B,AAtCZ,SAAqB,CAAW,EAC5B,IAAM,EAAS,CACX,KAAM,EAAY,CAAC,CAAG,IACtB,KAAM,WAAW,EAAY,CAAC,EAC9B,KAAM,WAAW,EAAY,CAAC,EAC9B,IAAK,WAAW,EAAY,CAAC,EAC7B,MAAO,WAAW,EAAY,CAAC,CACnC,EACA,EAAO,MAAM,CAAC,EAClB,EA6BwB,EAChB,CACJ,CACJ,CAGA,SAAS,cAAc,CAAC,iBAAiB,gBAAgB,CAAC,QAAS,SAAU,CAAC,EACtE,EAAE,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,gBAE5B,SAAS,gBAAgB,CAAC,8BAA8B,OAAO,CAAC,AAAA,GAAO,EAAI,SAAS,CAAC,MAAM,CAAC,WAC5F,EAAE,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,UAGvB,EAAgB,EAAE,MAAM,CAAC,YAAY,CAAC,cACtC,EAAO,KAAK,GAEZ,EAA0B,EAAe,GAEjD,GAGA,SAAS,cAAc,CAAC,mBAAmB,gBAAgB,CAAC,QAAS,SAAU,CAAC,EACxE,EAAE,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,gBAE5B,SAAS,gBAAgB,CAAC,gCAAgC,OAAO,CAAC,AAAA,GAAO,EAAI,SAAS,CAAC,MAAM,CAAC,WAC9F,EAAE,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,UAGvB,EAAkB,EAAE,MAAM,CAAC,YAAY,CAAC,cACxC,EAAO,KAAK,GACZ,EAA0B,EAAe,GAEjD,GA1EI,EAAS,AADD,kBAAkB,WAAW,CAAC,EAAgB,CAtBtD,OAAQ,CACJ,WAAY,CAAE,KAAM,QAAS,MAAO,SAAU,EAC9C,UAAW,OACf,EACA,KAAM,CACF,UAAW,CACP,MAAO,OACX,EACA,UAAW,CACP,MAAO,SACX,CACJ,EACA,UAAW,CACP,YAAa,SACjB,EACA,WAAY,CACR,YAAa,SACjB,CAKuE,GACxD,oBAAoB,GA8EvC,EAA0B,EAAe","sources":["<anon>","script.js"],"sourcesContent":["const chartContainer = document.getElementById(\"chart-container\");\nlet currentSymbol = \"ethusdt\";\nlet currentInterval = \"1m\";\nlet socket;\nlet chart;\nlet series;\nconst savedData = {\n    ethusdt: [],\n    bnbusdt: [],\n    dotusdt: []\n};\nconst chartOptions = {\n    layout: {\n        background: {\n            type: \"solid\",\n            color: \"#1e1e1e\"\n        },\n        textColor: \"white\"\n    },\n    grid: {\n        vertLines: {\n            color: \"white\"\n        },\n        horzLines: {\n            color: \"#444444\"\n        }\n    },\n    timeScale: {\n        borderColor: \"#888888\"\n    },\n    priceScale: {\n        borderColor: \"#888888\"\n    }\n};\n// Initialize TradingView Lightweight Chart\nfunction createChart() {\n    chart = LightweightCharts.createChart(chartContainer, {\n        ...chartOptions\n    });\n    series = chart.addCandlestickSeries();\n}\n// Update the chart with new candlestick data\nfunction updateChart(candlestick) {\n    const candle = {\n        time: candlestick.t / 1000,\n        open: parseFloat(candlestick.o),\n        high: parseFloat(candlestick.h),\n        low: parseFloat(candlestick.l),\n        close: parseFloat(candlestick.c)\n    };\n    series.update(candle);\n}\n// Save candlestick data to in-memory structure or localStorage\nfunction saveCandleData(symbol, candlestick) {\n    savedData[symbol].push(candlestick);\n// localStorage.setItem(symbol, JSON.stringify(savedData[symbol]));\n}\n// Restore previously saved chart data from localStorage\n// function restoreChartData(symbol) {\n//     if (localStorage.getItem(symbol)) {\n//         savedData[symbol] = JSON.parse(localStorage.getItem(symbol));\n//         savedData[symbol].forEach(candle => updateChart(candle));\n//     }\n// }\n// Connect to Binance WebSocket\nfunction connectToBinanceWebSocket(symbol, interval) {\n    const wsUrl = `wss://stream.binance.com:9443/ws/${symbol}@kline_${interval}`;\n    socket = new WebSocket(wsUrl);\n    socket.onmessage = function(event) {\n        const message = JSON.parse(event.data);\n        if (message.k) {\n            const candlestick = message.k;\n            if (candlestick.x) saveCandleData(symbol, candlestick);\n            updateChart(candlestick);\n        }\n    };\n}\n// Handle cryptocurrency toggle button click\ndocument.getElementById(\"crypto-toggle\").addEventListener(\"click\", function(e) {\n    if (e.target.classList.contains(\"toggle-btn\")) {\n        // Remove 'active' class from all buttons and add to the clicked button\n        document.querySelectorAll(\"#crypto-toggle .toggle-btn\").forEach((btn)=>btn.classList.remove(\"active\"));\n        e.target.classList.add(\"active\");\n        // Change the current cryptocurrency symbol\n        currentSymbol = e.target.getAttribute(\"data-value\");\n        socket.close();\n        // restoreChartData(currentSymbol);\n        connectToBinanceWebSocket(currentSymbol, currentInterval);\n    }\n});\n// Handle interval toggle button click\ndocument.getElementById(\"interval-toggle\").addEventListener(\"click\", function(e) {\n    if (e.target.classList.contains(\"toggle-btn\")) {\n        // Remove 'active' class from all buttons and add to the clicked button\n        document.querySelectorAll(\"#interval-toggle .toggle-btn\").forEach((btn)=>btn.classList.remove(\"active\"));\n        e.target.classList.add(\"active\");\n        // Change the current interval\n        currentInterval = e.target.getAttribute(\"data-value\");\n        socket.close();\n        connectToBinanceWebSocket(currentSymbol, currentInterval);\n    }\n});\n// Initialize the chart and WebSocket connection\ncreateChart();\nconnectToBinanceWebSocket(currentSymbol, currentInterval); // restoreChartData(currentSymbol);\n\n//# sourceMappingURL=index.3f58926f.js.map\n","const chartContainer = document.getElementById('chart-container');\r\nlet currentSymbol = 'ethusdt';\r\nlet currentInterval = '1m';\r\nlet socket;\r\nlet chart;\r\nlet series;\r\n\r\nconst savedData = {\r\n    ethusdt: [],\r\n    bnbusdt: [],\r\n    dotusdt: []\r\n};\r\n\r\nconst chartOptions = {\r\n    layout: {\r\n        background: { type: 'solid', color: '#1e1e1e' },  // Dark background\r\n        textColor: 'white',  // White text for axes labels\r\n    },\r\n    grid: {\r\n        vertLines: {\r\n            color: 'white',  // Dark gray vertical grid lines\r\n        },\r\n        horzLines: {\r\n            color: '#444444',  // Dark gray horizontal grid lines\r\n        },\r\n    },\r\n    timeScale: {\r\n        borderColor: '#888888',  // Light gray border for the time scale\r\n    },\r\n    priceScale: {\r\n        borderColor: '#888888',  // Light gray border for the price scale\r\n    },\r\n};\r\n\r\n// Initialize TradingView Lightweight Chart\r\nfunction createChart() {\r\n    chart = LightweightCharts.createChart(chartContainer, { ...chartOptions});\r\n    series = chart.addCandlestickSeries();\r\n}\r\n\r\n// Update the chart with new candlestick data\r\nfunction updateChart(candlestick) {\r\n    const candle = {\r\n        time: candlestick.t / 1000,  // Convert timestamp from milliseconds to seconds\r\n        open: parseFloat(candlestick.o),\r\n        high: parseFloat(candlestick.h),\r\n        low: parseFloat(candlestick.l),\r\n        close: parseFloat(candlestick.c)\r\n    };\r\n    series.update(candle);\r\n}\r\n\r\n// Save candlestick data to in-memory structure or localStorage\r\nfunction saveCandleData(symbol, candlestick) {\r\n    savedData[symbol].push(candlestick);\r\n    // localStorage.setItem(symbol, JSON.stringify(savedData[symbol]));\r\n}\r\n\r\n// Restore previously saved chart data from localStorage\r\n\r\n// function restoreChartData(symbol) {\r\n//     if (localStorage.getItem(symbol)) {\r\n//         savedData[symbol] = JSON.parse(localStorage.getItem(symbol));\r\n//         savedData[symbol].forEach(candle => updateChart(candle));\r\n//     }\r\n// }\r\n\r\n// Connect to Binance WebSocket\r\nfunction connectToBinanceWebSocket(symbol, interval) {\r\n    const wsUrl = `wss://stream.binance.com:9443/ws/${symbol}@kline_${interval}`;\r\n    socket = new WebSocket(wsUrl);\r\n\r\n    socket.onmessage = function (event) {\r\n        const message = JSON.parse(event.data);\r\n        if (message.k) {\r\n            const candlestick = message.k;\r\n            if (candlestick.x) {\r\n                saveCandleData(symbol, candlestick);\r\n            }\r\n            updateChart(candlestick);\r\n        }\r\n    };\r\n}\r\n\r\n// Handle cryptocurrency toggle button click\r\ndocument.getElementById('crypto-toggle').addEventListener('click', function (e) {\r\n    if (e.target.classList.contains('toggle-btn')) {\r\n        // Remove 'active' class from all buttons and add to the clicked button\r\n        document.querySelectorAll('#crypto-toggle .toggle-btn').forEach(btn => btn.classList.remove('active'));\r\n        e.target.classList.add('active');\r\n        \r\n        // Change the current cryptocurrency symbol\r\n        currentSymbol = e.target.getAttribute('data-value');\r\n        socket.close();\r\n        // restoreChartData(currentSymbol);\r\n        connectToBinanceWebSocket(currentSymbol, currentInterval);\r\n    }\r\n});\r\n\r\n// Handle interval toggle button click\r\ndocument.getElementById('interval-toggle').addEventListener('click', function (e) {\r\n    if (e.target.classList.contains('toggle-btn')) {\r\n        // Remove 'active' class from all buttons and add to the clicked button\r\n        document.querySelectorAll('#interval-toggle .toggle-btn').forEach(btn => btn.classList.remove('active'));\r\n        e.target.classList.add('active');\r\n        \r\n        // Change the current interval\r\n        currentInterval = e.target.getAttribute('data-value');\r\n        socket.close();\r\n        connectToBinanceWebSocket(currentSymbol, currentInterval);\r\n    }\r\n});\r\n\r\n// Initialize the chart and WebSocket connection\r\ncreateChart();\r\nconnectToBinanceWebSocket(currentSymbol, currentInterval);\r\n// restoreChartData(currentSymbol);\r\n"],"names":["socket","series","chartContainer","document","getElementById","currentSymbol","currentInterval","savedData","ethusdt","bnbusdt","dotusdt","connectToBinanceWebSocket","symbol","interval","WebSocket","onmessage","event","message","JSON","parse","data","k","candlestick","x","saveCandleData","push","updateChart","candle","time","t","open","parseFloat","o","high","h","low","l","close","c","update","addEventListener","e","target","classList","contains","querySelectorAll","forEach","btn","remove","add","getAttribute","chart","LightweightCharts","createChart","layout","background","type","color","textColor","grid","vertLines","horzLines","timeScale","borderColor","priceScale","addCandlestickSeries"],"version":3,"file":"index.3f58926f.js.map"}